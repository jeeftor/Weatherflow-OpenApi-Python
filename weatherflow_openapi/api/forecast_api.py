# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from weatherflow_openapi.models.better_forecast import BetterForecast

from weatherflow_openapi.api_client import ApiClient
from weatherflow_openapi.api_response import ApiResponse
from weatherflow_openapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ForecastApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def get_better_forecast(self, station_id : Annotated[StrictInt, Field(..., description="The station_id to use in the current conditions response object.")], units_temp : Annotated[Optional[StrictStr], Field(description="default = c")] = None, units_wind : Annotated[Optional[StrictStr], Field(description="default = mps")] = None, units_pressure : Annotated[Optional[StrictStr], Field(description="default = mb")] = None, units_precip : Annotated[Optional[StrictStr], Field(description="default = mm")] = None, units_distance : Annotated[Optional[StrictStr], Field(description="default = km")] = None, **kwargs) -> BetterForecast:  # noqa: E501
        ...

    @overload
    def get_better_forecast(self, station_id : Annotated[StrictInt, Field(..., description="The station_id to use in the current conditions response object.")], units_temp : Annotated[Optional[StrictStr], Field(description="default = c")] = None, units_wind : Annotated[Optional[StrictStr], Field(description="default = mps")] = None, units_pressure : Annotated[Optional[StrictStr], Field(description="default = mb")] = None, units_precip : Annotated[Optional[StrictStr], Field(description="default = mm")] = None, units_distance : Annotated[Optional[StrictStr], Field(description="default = km")] = None, async_req: Optional[bool]=True, **kwargs) -> BetterForecast:  # noqa: E501
        ...

    @validate_arguments
    def get_better_forecast(self, station_id : Annotated[StrictInt, Field(..., description="The station_id to use in the current conditions response object.")], units_temp : Annotated[Optional[StrictStr], Field(description="default = c")] = None, units_wind : Annotated[Optional[StrictStr], Field(description="default = mps")] = None, units_pressure : Annotated[Optional[StrictStr], Field(description="default = mb")] = None, units_precip : Annotated[Optional[StrictStr], Field(description="default = mm")] = None, units_distance : Annotated[Optional[StrictStr], Field(description="default = km")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[BetterForecast, Awaitable[BetterForecast]]:  # noqa: E501
        """Get Better Forecast Data  # noqa: E501

        The better forecast includes current conditions, daily forecast and hourly forecast.<br><br><b>Possible Condition Strings:</b><br>Clear<br>Rain Likely<br>Rain Possible<br>Snow<br>Snow Possible<br>Wintry Mix Likely<br>Wintry Mix Possible<br>Thunderstorms Likely<br>Thunderstorms Possible<br>Windy<br>Foggy<br>Cloudy<br>Partly Cloudy<br>Very Light Rain<br><br><b>Possible Icon Values:</b><br>clear-day<br>clear-night<br>cloudy<br>foggy<br>partly-cloudy-day<br>partly-cloudy-night<br>possibly-rainy-day<br>possibly-rainy-night<br>possibly-sleet-day<br>possibly-sleet-night<br>possibly-snow-day<br>possibly-snow-night<br>possibly-thunderstorm-day<br>possibly-thunderstorm-night<br>rainy<br>sleet<br>snow<br>thunderstorm<br>windy<br><br><b>Possible Precip Type Values:</b><br>rain<br>snow<br>sleet<br>storm<br><br><b>Possible Precip Icon Values:</b><br>chance-rain<br>chance-snow<br>chance-sleet<br><br><b>Possible Pressure Trend Values:</b><br>falling<br>steady<br>rising<br>unknown<br><br><b>Possible Wind Direction Cardinal Values:</b><br>N<br>NNE<br>NE<br>ENE<br>E<br>ESE<br>SE<br>SSE<br>S<br>SSW<br>SW<br>WSW<br>W<br>WNW<br>NW<br>NNW<br>N  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_better_forecast(station_id, units_temp, units_wind, units_pressure, units_precip, units_distance, async_req=True)
        >>> result = thread.get()

        :param station_id: The station_id to use in the current conditions response object. (required)
        :type station_id: int
        :param units_temp: default = c
        :type units_temp: str
        :param units_wind: default = mps
        :type units_wind: str
        :param units_pressure: default = mb
        :type units_pressure: str
        :param units_precip: default = mm
        :type units_precip: str
        :param units_distance: default = km
        :type units_distance: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BetterForecast
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_better_forecast_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_better_forecast_with_http_info(station_id, units_temp, units_wind, units_pressure, units_precip, units_distance, **kwargs)  # noqa: E501

    @validate_arguments
    def get_better_forecast_with_http_info(self, station_id : Annotated[StrictInt, Field(..., description="The station_id to use in the current conditions response object.")], units_temp : Annotated[Optional[StrictStr], Field(description="default = c")] = None, units_wind : Annotated[Optional[StrictStr], Field(description="default = mps")] = None, units_pressure : Annotated[Optional[StrictStr], Field(description="default = mb")] = None, units_precip : Annotated[Optional[StrictStr], Field(description="default = mm")] = None, units_distance : Annotated[Optional[StrictStr], Field(description="default = km")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Better Forecast Data  # noqa: E501

        The better forecast includes current conditions, daily forecast and hourly forecast.<br><br><b>Possible Condition Strings:</b><br>Clear<br>Rain Likely<br>Rain Possible<br>Snow<br>Snow Possible<br>Wintry Mix Likely<br>Wintry Mix Possible<br>Thunderstorms Likely<br>Thunderstorms Possible<br>Windy<br>Foggy<br>Cloudy<br>Partly Cloudy<br>Very Light Rain<br><br><b>Possible Icon Values:</b><br>clear-day<br>clear-night<br>cloudy<br>foggy<br>partly-cloudy-day<br>partly-cloudy-night<br>possibly-rainy-day<br>possibly-rainy-night<br>possibly-sleet-day<br>possibly-sleet-night<br>possibly-snow-day<br>possibly-snow-night<br>possibly-thunderstorm-day<br>possibly-thunderstorm-night<br>rainy<br>sleet<br>snow<br>thunderstorm<br>windy<br><br><b>Possible Precip Type Values:</b><br>rain<br>snow<br>sleet<br>storm<br><br><b>Possible Precip Icon Values:</b><br>chance-rain<br>chance-snow<br>chance-sleet<br><br><b>Possible Pressure Trend Values:</b><br>falling<br>steady<br>rising<br>unknown<br><br><b>Possible Wind Direction Cardinal Values:</b><br>N<br>NNE<br>NE<br>ENE<br>E<br>ESE<br>SE<br>SSE<br>S<br>SSW<br>SW<br>WSW<br>W<br>WNW<br>NW<br>NNW<br>N  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_better_forecast_with_http_info(station_id, units_temp, units_wind, units_pressure, units_precip, units_distance, async_req=True)
        >>> result = thread.get()

        :param station_id: The station_id to use in the current conditions response object. (required)
        :type station_id: int
        :param units_temp: default = c
        :type units_temp: str
        :param units_wind: default = mps
        :type units_wind: str
        :param units_pressure: default = mb
        :type units_pressure: str
        :param units_precip: default = mm
        :type units_precip: str
        :param units_distance: default = km
        :type units_distance: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BetterForecast, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'station_id',
            'units_temp',
            'units_wind',
            'units_pressure',
            'units_precip',
            'units_distance'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_better_forecast" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('station_id') is not None:  # noqa: E501
            _query_params.append(('station_id', _params['station_id']))

        if _params.get('units_temp') is not None:  # noqa: E501
            _query_params.append(('units_temp', _params['units_temp']))

        if _params.get('units_wind') is not None:  # noqa: E501
            _query_params.append(('units_wind', _params['units_wind']))

        if _params.get('units_pressure') is not None:  # noqa: E501
            _query_params.append(('units_pressure', _params['units_pressure']))

        if _params.get('units_precip') is not None:  # noqa: E501
            _query_params.append(('units_precip', _params['units_precip']))

        if _params.get('units_distance') is not None:  # noqa: E501
            _query_params.append(('units_distance', _params['units_distance']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['swdApiKey', 'swdImplicit']  # noqa: E501

        _response_types_map = {
            '200': "BetterForecast",
            '404': None,
        }

        return self.api_client.call_api(
            '/better_forecast', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
