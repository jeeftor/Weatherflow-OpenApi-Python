# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr

class BetterForecastCurrentConditions(BaseModel):
    """
    BetterForecastCurrentConditions
    """
    time: Optional[Union[StrictFloat, StrictInt]] = None
    conditions: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    air_temperature: Optional[Union[StrictFloat, StrictInt]] = None
    sea_level_pressure: Optional[Union[StrictFloat, StrictInt]] = None
    station_pressure: Optional[Union[StrictFloat, StrictInt]] = None
    pressure_trend: Optional[StrictStr] = None
    relative_humidity: Optional[Union[StrictFloat, StrictInt]] = None
    wind_avg: Optional[Union[StrictFloat, StrictInt]] = None
    wind_direction: Optional[Union[StrictFloat, StrictInt]] = None
    wind_direction_cardinal: Optional[StrictStr] = None
    wind_direction_icon: Optional[StrictStr] = None
    wind_gust: Optional[Union[StrictFloat, StrictInt]] = None
    solar_radiation: Optional[Union[StrictFloat, StrictInt]] = None
    uv: Optional[Union[StrictFloat, StrictInt]] = None
    brightness: Optional[Union[StrictFloat, StrictInt]] = None
    feels_like: Optional[Union[StrictFloat, StrictInt]] = None
    dew_point: Optional[Union[StrictFloat, StrictInt]] = None
    wet_bulb_temperature: Optional[Union[StrictFloat, StrictInt]] = None
    delta_t: Optional[Union[StrictFloat, StrictInt]] = None
    air_density: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_count_last_1hr: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_count_last_3hr: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_last_distance: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_last_distance_msg: Optional[StrictStr] = None
    lightning_strike_last_epoch: Optional[Union[StrictFloat, StrictInt]] = None
    precip_accum_local_day: Optional[Union[StrictFloat, StrictInt]] = None
    precip_accum_local_yesterday: Optional[Union[StrictFloat, StrictInt]] = None
    precip_minutes_local_day: Optional[Union[StrictFloat, StrictInt]] = None
    precip_minutes_local_yesterday: Optional[Union[StrictFloat, StrictInt]] = None
    is_precip_local_day_rain_check: Optional[StrictBool] = None
    is_precip_local_yesterday_rain_check: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["time", "conditions", "icon", "air_temperature", "sea_level_pressure", "station_pressure", "pressure_trend", "relative_humidity", "wind_avg", "wind_direction", "wind_direction_cardinal", "wind_direction_icon", "wind_gust", "solar_radiation", "uv", "brightness", "feels_like", "dew_point", "wet_bulb_temperature", "delta_t", "air_density", "lightning_strike_count_last_1hr", "lightning_strike_count_last_3hr", "lightning_strike_last_distance", "lightning_strike_last_distance_msg", "lightning_strike_last_epoch", "precip_accum_local_day", "precip_accum_local_yesterday", "precip_minutes_local_day", "precip_minutes_local_yesterday", "is_precip_local_day_rain_check", "is_precip_local_yesterday_rain_check"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BetterForecastCurrentConditions:
        """Create an instance of BetterForecastCurrentConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BetterForecastCurrentConditions:
        """Create an instance of BetterForecastCurrentConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BetterForecastCurrentConditions.parse_obj(obj)

        _obj = BetterForecastCurrentConditions.parse_obj({
            "time": obj.get("time"),
            "conditions": obj.get("conditions"),
            "icon": obj.get("icon"),
            "air_temperature": obj.get("air_temperature"),
            "sea_level_pressure": obj.get("sea_level_pressure"),
            "station_pressure": obj.get("station_pressure"),
            "pressure_trend": obj.get("pressure_trend"),
            "relative_humidity": obj.get("relative_humidity"),
            "wind_avg": obj.get("wind_avg"),
            "wind_direction": obj.get("wind_direction"),
            "wind_direction_cardinal": obj.get("wind_direction_cardinal"),
            "wind_direction_icon": obj.get("wind_direction_icon"),
            "wind_gust": obj.get("wind_gust"),
            "solar_radiation": obj.get("solar_radiation"),
            "uv": obj.get("uv"),
            "brightness": obj.get("brightness"),
            "feels_like": obj.get("feels_like"),
            "dew_point": obj.get("dew_point"),
            "wet_bulb_temperature": obj.get("wet_bulb_temperature"),
            "delta_t": obj.get("delta_t"),
            "air_density": obj.get("air_density"),
            "lightning_strike_count_last_1hr": obj.get("lightning_strike_count_last_1hr"),
            "lightning_strike_count_last_3hr": obj.get("lightning_strike_count_last_3hr"),
            "lightning_strike_last_distance": obj.get("lightning_strike_last_distance"),
            "lightning_strike_last_distance_msg": obj.get("lightning_strike_last_distance_msg"),
            "lightning_strike_last_epoch": obj.get("lightning_strike_last_epoch"),
            "precip_accum_local_day": obj.get("precip_accum_local_day"),
            "precip_accum_local_yesterday": obj.get("precip_accum_local_yesterday"),
            "precip_minutes_local_day": obj.get("precip_minutes_local_day"),
            "precip_minutes_local_yesterday": obj.get("precip_minutes_local_yesterday"),
            "is_precip_local_day_rain_check": obj.get("is_precip_local_day_rain_check"),
            "is_precip_local_yesterday_rain_check": obj.get("is_precip_local_yesterday_rain_check")
        })
        return _obj


