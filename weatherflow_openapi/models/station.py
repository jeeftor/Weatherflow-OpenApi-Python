# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, conlist
from weatherflow_openapi.models.device import Device
from weatherflow_openapi.models.station_item import StationItem
from weatherflow_openapi.models.station_meta import StationMeta

class Station(BaseModel):
    """
    Station
    """
    station_id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    public_name: Optional[StrictStr] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    station_meta: Optional[StationMeta] = None
    devices: Optional[conlist(Device)] = None
    station_items: Optional[conlist(StationItem)] = None
    __properties = ["station_id", "name", "public_name", "latitude", "longitude", "station_meta", "devices", "station_items"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Station:
        """Create an instance of Station from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of station_meta
        if self.station_meta:
            _dict['station_meta'] = self.station_meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in devices (list)
        _items = []
        if self.devices:
            for _item in self.devices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['devices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in station_items (list)
        _items = []
        if self.station_items:
            for _item in self.station_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['station_items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Station:
        """Create an instance of Station from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Station.parse_obj(obj)

        _obj = Station.parse_obj({
            "station_id": obj.get("station_id"),
            "name": obj.get("name"),
            "public_name": obj.get("public_name"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "station_meta": StationMeta.from_dict(obj.get("station_meta")) if obj.get("station_meta") is not None else None,
            "devices": [Device.from_dict(_item) for _item in obj.get("devices")] if obj.get("devices") is not None else None,
            "station_items": [StationItem.from_dict(_item) for _item in obj.get("station_items")] if obj.get("station_items") is not None else None
        })
        return _obj


