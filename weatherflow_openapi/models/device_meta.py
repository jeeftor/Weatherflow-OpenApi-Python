# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, validator

class DeviceMeta(BaseModel):
    """
    DeviceMeta
    """
    agl: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    environment: Optional[StrictStr] = None
    wifi_network_name: Optional[StrictStr] = None
    __properties = ["agl", "name", "environment", "wifi_network_name"]

    @validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('indoor', 'outdoor'):
            raise ValueError("must be one of enum values ('indoor', 'outdoor')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceMeta:
        """Create an instance of DeviceMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceMeta:
        """Create an instance of DeviceMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceMeta.parse_obj(obj)

        _obj = DeviceMeta.parse_obj({
            "agl": obj.get("agl"),
            "name": obj.get("name"),
            "environment": obj.get("environment"),
            "wifi_network_name": obj.get("wifi_network_name")
        })
        return _obj


