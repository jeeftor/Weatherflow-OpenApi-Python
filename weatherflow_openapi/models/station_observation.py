# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, conlist
from weatherflow_openapi.models.station_observation_values import StationObservationValues
from weatherflow_openapi.models.station_units import StationUnits
from weatherflow_openapi.models.status import Status

class StationObservation(BaseModel):
    """
    StationObservation
    """
    status: Optional[Status] = None
    station_units: Optional[StationUnits] = None
    station_id: Optional[StrictInt] = None
    station_name: Optional[StrictStr] = None
    public_name: Optional[StrictStr] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    timezone: Optional[StrictStr] = None
    elevation: Optional[Union[StrictFloat, StrictInt]] = None
    obs: Optional[conlist(StationObservationValues)] = None
    __properties = ["status", "station_units", "station_id", "station_name", "public_name", "latitude", "longitude", "timezone", "elevation", "obs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StationObservation:
        """Create an instance of StationObservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of station_units
        if self.station_units:
            _dict['station_units'] = self.station_units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in obs (list)
        _items = []
        if self.obs:
            for _item in self.obs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['obs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StationObservation:
        """Create an instance of StationObservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StationObservation.parse_obj(obj)

        _obj = StationObservation.parse_obj({
            "status": Status.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "station_units": StationUnits.from_dict(obj.get("station_units")) if obj.get("station_units") is not None else None,
            "station_id": obj.get("station_id"),
            "station_name": obj.get("station_name"),
            "public_name": obj.get("public_name"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "timezone": obj.get("timezone"),
            "elevation": obj.get("elevation"),
            "obs": [StationObservationValues.from_dict(_item) for _item in obj.get("obs")] if obj.get("obs") is not None else None
        })
        return _obj


