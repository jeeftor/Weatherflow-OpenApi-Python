# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from weatherflow_openapi.models.better_forecast_current_conditions import BetterForecastCurrentConditions
from weatherflow_openapi.models.better_forecast_forecast import BetterForecastForecast
from weatherflow_openapi.models.better_forecast_units import BetterForecastUnits
from weatherflow_openapi.models.status import Status

class BetterForecast(BaseModel):
    """
    BetterForecast
    """
    status: Optional[Status] = None
    current_conditions: Optional[BetterForecastCurrentConditions] = None
    forecast: Optional[BetterForecastForecast] = None
    units: Optional[BetterForecastUnits] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    timezone: Optional[StrictStr] = None
    timezone_offset_minutes: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["status", "current_conditions", "forecast", "units", "latitude", "longitude", "timezone", "timezone_offset_minutes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BetterForecast:
        """Create an instance of BetterForecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_conditions
        if self.current_conditions:
            _dict['current_conditions'] = self.current_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forecast
        if self.forecast:
            _dict['forecast'] = self.forecast.to_dict()
        # override the default output from pydantic by calling `to_dict()` of units
        if self.units:
            _dict['units'] = self.units.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BetterForecast:
        """Create an instance of BetterForecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BetterForecast.parse_obj(obj)

        _obj = BetterForecast.parse_obj({
            "status": Status.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "current_conditions": BetterForecastCurrentConditions.from_dict(obj.get("current_conditions")) if obj.get("current_conditions") is not None else None,
            "forecast": BetterForecastForecast.from_dict(obj.get("forecast")) if obj.get("forecast") is not None else None,
            "units": BetterForecastUnits.from_dict(obj.get("units")) if obj.get("units") is not None else None,
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "timezone": obj.get("timezone"),
            "timezone_offset_minutes": obj.get("timezone_offset_minutes")
        })
        return _obj


