# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr

class BetterForecastDailyForecast(BaseModel):
    """
    BetterForecastDailyForecast
    """
    day_start_local: Optional[Union[StrictFloat, StrictInt]] = None
    day_num: Optional[Union[StrictFloat, StrictInt]] = None
    month_num: Optional[Union[StrictFloat, StrictInt]] = None
    conditions: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    sunrise: Optional[Union[StrictFloat, StrictInt]] = None
    sunset: Optional[Union[StrictFloat, StrictInt]] = None
    air_temp_high: Optional[Union[StrictFloat, StrictInt]] = None
    air_temp_low: Optional[Union[StrictFloat, StrictInt]] = None
    precip_probability: Optional[Union[StrictFloat, StrictInt]] = None
    precip_icon: Optional[StrictStr] = None
    precip_type: Optional[StrictStr] = None
    __properties = ["day_start_local", "day_num", "month_num", "conditions", "icon", "sunrise", "sunset", "air_temp_high", "air_temp_low", "precip_probability", "precip_icon", "precip_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BetterForecastDailyForecast:
        """Create an instance of BetterForecastDailyForecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BetterForecastDailyForecast:
        """Create an instance of BetterForecastDailyForecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BetterForecastDailyForecast.parse_obj(obj)

        _obj = BetterForecastDailyForecast.parse_obj({
            "day_start_local": obj.get("day_start_local"),
            "day_num": obj.get("day_num"),
            "month_num": obj.get("month_num"),
            "conditions": obj.get("conditions"),
            "icon": obj.get("icon"),
            "sunrise": obj.get("sunrise"),
            "sunset": obj.get("sunset"),
            "air_temp_high": obj.get("air_temp_high"),
            "air_temp_low": obj.get("air_temp_low"),
            "precip_probability": obj.get("precip_probability"),
            "precip_icon": obj.get("precip_icon"),
            "precip_type": obj.get("precip_type")
        })
        return _obj


