# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, conlist, validator
from weatherflow_openapi.models.status import Status

class ObservationSet(BaseModel):
    """
    ObservationSet
    """
    status: Optional[Status] = None
    device_id: Optional[Union[StrictFloat, StrictInt]] = None
    type: Optional[StrictStr] = None
    obs: Optional[conlist(conlist(Union[StrictFloat, StrictInt]))] = None
    __properties = ["status", "device_id", "type", "obs"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('obs_sky', 'obs_air'):
            raise ValueError("must be one of enum values ('obs_sky', 'obs_air')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ObservationSet:
        """Create an instance of ObservationSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ObservationSet:
        """Create an instance of ObservationSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ObservationSet.parse_obj(obj)

        _obj = ObservationSet.parse_obj({
            "status": Status.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "device_id": obj.get("device_id"),
            "type": obj.get("type"),
            "obs": obj.get("obs")
        })
        return _obj


