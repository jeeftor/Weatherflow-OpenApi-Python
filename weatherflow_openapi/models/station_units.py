# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class StationUnits(BaseModel):
    """
    StationUnits
    """
    units_temp: Optional[StrictStr] = None
    units_wind: Optional[StrictStr] = None
    units_precip: Optional[StrictStr] = None
    units_pressure: Optional[StrictStr] = None
    units_distance: Optional[StrictStr] = None
    units_direction: Optional[StrictStr] = None
    units_other: Optional[StrictStr] = None
    __properties = ["units_temp", "units_wind", "units_precip", "units_pressure", "units_distance", "units_direction", "units_other"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StationUnits:
        """Create an instance of StationUnits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StationUnits:
        """Create an instance of StationUnits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StationUnits.parse_obj(obj)

        _obj = StationUnits.parse_obj({
            "units_temp": obj.get("units_temp"),
            "units_wind": obj.get("units_wind"),
            "units_precip": obj.get("units_precip"),
            "units_pressure": obj.get("units_pressure"),
            "units_distance": obj.get("units_distance"),
            "units_direction": obj.get("units_direction"),
            "units_other": obj.get("units_other")
        })
        return _obj


