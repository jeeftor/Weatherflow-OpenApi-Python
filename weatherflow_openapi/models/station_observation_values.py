# coding: utf-8

"""
    WeatherFlow Tempest API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: jforare@weatherflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt

class StationObservationValues(BaseModel):
    """
    StationObservationValues
    """
    timestamp: Optional[Union[StrictFloat, StrictInt]] = None
    air_temperature: Optional[Union[StrictFloat, StrictInt]] = None
    barometric_pressure: Optional[Union[StrictFloat, StrictInt]] = None
    sea_level_pressure: Optional[Union[StrictFloat, StrictInt]] = None
    relative_humidity: Optional[Union[StrictFloat, StrictInt]] = None
    precip: Optional[Union[StrictFloat, StrictInt]] = None
    precip_accum_last_1hr: Optional[Union[StrictFloat, StrictInt]] = None
    wind_avg: Optional[Union[StrictFloat, StrictInt]] = None
    wind_direction: Optional[Union[StrictFloat, StrictInt]] = None
    wind_gust: Optional[Union[StrictFloat, StrictInt]] = None
    wind_lull: Optional[Union[StrictFloat, StrictInt]] = None
    solar_radiation: Optional[Union[StrictFloat, StrictInt]] = None
    uv: Optional[Union[StrictFloat, StrictInt]] = None
    brightness: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_last_epoch: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_last_distance: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_count_last_3hr: Optional[Union[StrictFloat, StrictInt]] = None
    feels_like: Optional[Union[StrictFloat, StrictInt]] = None
    heat_index: Optional[Union[StrictFloat, StrictInt]] = None
    wind_chill: Optional[Union[StrictFloat, StrictInt]] = None
    dew_point: Optional[Union[StrictFloat, StrictInt]] = None
    wet_bulb_temperature: Optional[Union[StrictFloat, StrictInt]] = None
    delta_t: Optional[Union[StrictFloat, StrictInt]] = None
    air_density: Optional[Union[StrictFloat, StrictInt]] = None
    air_temperature_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    barometric_pressure_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    sea_level_pressure_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    relative_humidity_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    precip_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    precip_accum_last_1hr_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    wind_avg_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    wind_direction_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    wind_gust_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    wind_lull_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    solar_radiation_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    uv_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    brightness_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_last_epoch_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_last_distance_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    lightning_strike_count_last_3hr_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    feels_like_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    heat_index_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    wind_chill_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    dew_point_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    wet_bulb_temperature_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    delta_t_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    air_density_indoor: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["timestamp", "air_temperature", "barometric_pressure", "sea_level_pressure", "relative_humidity", "precip", "precip_accum_last_1hr", "wind_avg", "wind_direction", "wind_gust", "wind_lull", "solar_radiation", "uv", "brightness", "lightning_strike_last_epoch", "lightning_strike_last_distance", "lightning_strike_count_last_3hr", "feels_like", "heat_index", "wind_chill", "dew_point", "wet_bulb_temperature", "delta_t", "air_density", "air_temperature_indoor", "barometric_pressure_indoor", "sea_level_pressure_indoor", "relative_humidity_indoor", "precip_indoor", "precip_accum_last_1hr_indoor", "wind_avg_indoor", "wind_direction_indoor", "wind_gust_indoor", "wind_lull_indoor", "solar_radiation_indoor", "uv_indoor", "brightness_indoor", "lightning_strike_last_epoch_indoor", "lightning_strike_last_distance_indoor", "lightning_strike_count_last_3hr_indoor", "feels_like_indoor", "heat_index_indoor", "wind_chill_indoor", "dew_point_indoor", "wet_bulb_temperature_indoor", "delta_t_indoor", "air_density_indoor"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StationObservationValues:
        """Create an instance of StationObservationValues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StationObservationValues:
        """Create an instance of StationObservationValues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StationObservationValues.parse_obj(obj)

        _obj = StationObservationValues.parse_obj({
            "timestamp": obj.get("timestamp"),
            "air_temperature": obj.get("air_temperature"),
            "barometric_pressure": obj.get("barometric_pressure"),
            "sea_level_pressure": obj.get("sea_level_pressure"),
            "relative_humidity": obj.get("relative_humidity"),
            "precip": obj.get("precip"),
            "precip_accum_last_1hr": obj.get("precip_accum_last_1hr"),
            "wind_avg": obj.get("wind_avg"),
            "wind_direction": obj.get("wind_direction"),
            "wind_gust": obj.get("wind_gust"),
            "wind_lull": obj.get("wind_lull"),
            "solar_radiation": obj.get("solar_radiation"),
            "uv": obj.get("uv"),
            "brightness": obj.get("brightness"),
            "lightning_strike_last_epoch": obj.get("lightning_strike_last_epoch"),
            "lightning_strike_last_distance": obj.get("lightning_strike_last_distance"),
            "lightning_strike_count_last_3hr": obj.get("lightning_strike_count_last_3hr"),
            "feels_like": obj.get("feels_like"),
            "heat_index": obj.get("heat_index"),
            "wind_chill": obj.get("wind_chill"),
            "dew_point": obj.get("dew_point"),
            "wet_bulb_temperature": obj.get("wet_bulb_temperature"),
            "delta_t": obj.get("delta_t"),
            "air_density": obj.get("air_density"),
            "air_temperature_indoor": obj.get("air_temperature_indoor"),
            "barometric_pressure_indoor": obj.get("barometric_pressure_indoor"),
            "sea_level_pressure_indoor": obj.get("sea_level_pressure_indoor"),
            "relative_humidity_indoor": obj.get("relative_humidity_indoor"),
            "precip_indoor": obj.get("precip_indoor"),
            "precip_accum_last_1hr_indoor": obj.get("precip_accum_last_1hr_indoor"),
            "wind_avg_indoor": obj.get("wind_avg_indoor"),
            "wind_direction_indoor": obj.get("wind_direction_indoor"),
            "wind_gust_indoor": obj.get("wind_gust_indoor"),
            "wind_lull_indoor": obj.get("wind_lull_indoor"),
            "solar_radiation_indoor": obj.get("solar_radiation_indoor"),
            "uv_indoor": obj.get("uv_indoor"),
            "brightness_indoor": obj.get("brightness_indoor"),
            "lightning_strike_last_epoch_indoor": obj.get("lightning_strike_last_epoch_indoor"),
            "lightning_strike_last_distance_indoor": obj.get("lightning_strike_last_distance_indoor"),
            "lightning_strike_count_last_3hr_indoor": obj.get("lightning_strike_count_last_3hr_indoor"),
            "feels_like_indoor": obj.get("feels_like_indoor"),
            "heat_index_indoor": obj.get("heat_index_indoor"),
            "wind_chill_indoor": obj.get("wind_chill_indoor"),
            "dew_point_indoor": obj.get("dew_point_indoor"),
            "wet_bulb_temperature_indoor": obj.get("wet_bulb_temperature_indoor"),
            "delta_t_indoor": obj.get("delta_t_indoor"),
            "air_density_indoor": obj.get("air_density_indoor")
        })
        return _obj


